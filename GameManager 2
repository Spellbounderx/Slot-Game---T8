using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI; // Required for Button

public class GameManager : MonoBehaviour
{
    [Header("Board Settings")]
    [SerializeField] private int boardHeight = 3;
    [SerializeField] private int boardWidth = 3;

    [Header("Slot Icons")]
    [SerializeField] private GameObject[] gamePieces;

    [Header("UI Button")]
    [SerializeField] private Button spinButton; // Assign the Button in Inspector

    private GameObject _board;
    private GameObject[,] _gameBoard;
    private Vector3 _offset = new Vector3(0, 0, -1);
    private List<GameObject> _matchLines;

    void Awake()
    {
        // Auto-assign the button listener
        if (spinButton != null)
        {
            spinButton.onClick.AddListener(Spin);
        }
        else
        {
            Debug.LogWarning("Spin button not assigned in inspector!");
        }
    }

    void Start()
    {
        _board = GameObject.Find("GameBoard");
        if (_board == null)
        {
            Debug.LogError("GameBoard object not found!");
            return;
        }

        _gameBoard = new GameObject[boardHeight, boardWidth];
        _matchLines = new List<GameObject>();

        Spin(); // Initial spawn
    }

    public void Spin()
    {
        Debug.Log("Spin button clicked!"); // Debug confirmation

        // Clear old match lines
        foreach (GameObject line in _matchLines)
            if (line != null) Destroy(line);
        _matchLines.Clear();

        for (int i = 0; i < boardHeight; i++)
        {
            for (int j = 0; j < boardWidth; j++)
            {
                // Destroy old piece if exists
                if (_gameBoard[i, j] != null)
                {
                    Destroy(_gameBoard[i, j]);
                }

                // Find slot
                Transform gridTransform = _board.transform.Find(i + "," + j);
                if (gridTransform == null)
                {
                    Debug.LogWarning($"Slot {i},{j} not found under GameBoard!");
                    _gameBoard[i, j] = null;
                    continue;
                }

                if (gridTransform.childCount > 0)
                    Destroy(gridTransform.GetChild(0).gameObject);

                // Spawn random piece
                GameObject pieceType = gamePieces[Random.Range(0, gamePieces.Length)];
                if (pieceType == null)
                {
                    _gameBoard[i, j] = null;
                    continue;
                }

                GameObject thisPiece = Instantiate(pieceType, gridTransform.position + _offset, Quaternion.identity, gridTransform);
                thisPiece.name = pieceType.name;
                _gameBoard[i, j] = thisPiece;
            }
        }

        CheckForMatches();
    }

    private void CheckForMatches()
    {
        CheckVerticalMatches();
        CheckHorizontalMatches();
    }

    private void DrawLine(Vector3 start, Vector3 end)
    {
        GameObject line = new GameObject("MatchLine");
        LineRenderer lr = line.AddComponent<LineRenderer>();
        lr.startWidth = 0.1f;
        lr.endWidth = 0.1f;
        lr.positionCount = 2;
        lr.SetPosition(0, start);
        lr.SetPosition(1, end);
        _matchLines.Add(line);
    }

    private void CheckVerticalMatches()
    {
        for (int col = 0; col < boardWidth; col++)
        {
            if (_gameBoard[0, col] == null || _gameBoard[1, col] == null || _gameBoard[2, col] == null)
                continue;

            if (_gameBoard[0, col].name == _gameBoard[1, col].name &&
                _gameBoard[1, col].name == _gameBoard[2, col].name)
            {
                DrawLine(_gameBoard[0, col].transform.position + _offset,
                         _gameBoard[2, col].transform.position + _offset);
            }
        }
    }

    private void CheckHorizontalMatches()
    {
        for (int row = 0; row < boardHeight; row++)
        {
            if (_gameBoard[row, 0] == null || _gameBoard[row, 1] == null || _gameBoard[row, 2] == null)
                continue;

            if (_gameBoard[row, 0].name == _gameBoard[row, 1].name &&
                _gameBoard[row, 1].name == _gameBoard[row, 2].name)
            {
                DrawLine(_gameBoard[row, 0].transform.position + _offset,
                         _gameBoard[row, 2].transform.position + _offset);
            }
        }
    }
}
