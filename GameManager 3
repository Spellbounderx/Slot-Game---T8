using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class GameManager : MonoBehaviour
{
    [Header("Board Settings")]
    [SerializeField] private int boardHeight = 3;
    [SerializeField] private int boardWidth = 3;

    [Header("Slot Icons")]
    [SerializeField] private GameObject[] gamePieces; // Prefabs with SymbolPrefab + SpriteRenderer

    [Header("UI Button")]
    [SerializeField] private Button spinButton; // Assign in Inspector

    private GameObject[,] _gameBoard;
    private List<GameObject> _matchLines;
    private Vector3 _offset = new Vector3(0, 0, -1);

    private GameObject _board;

    void Awake()
    {
        if (spinButton != null)
            spinButton.onClick.AddListener(Spin);
        else
            Debug.LogWarning("Spin button not assigned!");
    }

    void Start()
    {
        _board = GameObject.Find("GameBoard");
        if (_board == null)
        {
            Debug.LogError("GameBoard object not found!");
            return;
        }

        _gameBoard = new GameObject[boardHeight, boardWidth];
        _matchLines = new List<GameObject>();

        Spin(); // initial spawn
    }

    public void Spin()
    {
        // Clear old match lines
        foreach (GameObject line in _matchLines)
            if (line != null) Destroy(line);
        _matchLines.Clear();

        for (int i = 0; i < boardHeight; i++)
        {
            for (int j = 0; j < boardWidth; j++)
            {
                // Destroy old piece if exists
                if (_gameBoard[i, j] != null)
                    Destroy(_gameBoard[i, j]);

                // Find existing slot
                Transform slotTransform = _board.transform.Find($"{i},{j}");
                if (slotTransform == null)
                {
                    Debug.LogWarning($"Slot {i},{j} not found under GameBoard!");
                    continue;
                }

                // Get weighted random piece
                GameObject pieceType = GetRandomPiece();
                if (pieceType == null)
                    continue;

                // Instantiate inside the box
                GameObject thisPiece = Instantiate(pieceType, slotTransform.position + _offset, Quaternion.identity, slotTransform);
                thisPiece.name = pieceType.name;

                // Assign sprite from SymbolData
                SymbolPrefab sp = thisPiece.GetComponent<SymbolPrefab>();
                if (sp != null && sp.symbolData != null)
                {
                    SpriteRenderer sr = thisPiece.GetComponent<SpriteRenderer>();
                    if (sr != null)
                        sr.sprite = sp.symbolData.symbolSprite;
                }

                _gameBoard[i, j] = thisPiece;
            }
        }

        CheckForMatches();
    }

    private GameObject GetRandomPiece()
    {
        int totalWeight = 0;
        List<(GameObject piece, int weight)> validPieces = new List<(GameObject, int)>();

        foreach (var symbol in gamePieces)
        {
            SymbolData data = symbol.GetComponent<SymbolPrefab>()?.symbolData;
            if (data != null && data.weight > 0)
            {
                validPieces.Add((symbol, data.weight));
                totalWeight += data.weight;
            }
        }

        if (totalWeight == 0)
        {
            Debug.LogError("All symbols are missing SymbolPrefab or have zero weight!");
            return null;
        }

        int randomValue = Random.Range(0, totalWeight);
        int cumulative = 0;

        foreach (var (piece, weight) in validPieces)
        {
            cumulative += weight;
            if (randomValue < cumulative)
                return piece;
        }

        return validPieces[0].piece; // fallback
    }

    // ---------------- Match Detection ----------------
    private void CheckForMatches()
    {
        CheckVerticalMatches();
        CheckHorizontalMatches();
    }

    private void DrawLine(Vector3 start, Vector3 end)
    {
        GameObject line = new GameObject("MatchLine");
        LineRenderer lr = line.AddComponent<LineRenderer>();
        lr.startWidth = 0.1f;
        lr.endWidth = 0.1f;
        lr.positionCount = 2;
        lr.SetPosition(0, start);
        lr.SetPosition(1, end);
        lr.material = new Material(Shader.Find("Sprites/Default"));
        lr.startColor = Color.red;
        lr.endColor = Color.red;
        _matchLines.Add(line);
    }

    private void CheckVerticalMatches()
    {
        for (int col = 0; col < boardWidth; col++)
        {
            for (int row = 0; row <= boardHeight - 3; row++)
            {
                if (_gameBoard[row, col] == null || _gameBoard[row + 1, col] == null || _gameBoard[row + 2, col] == null)
                    continue;

                string n1 = _gameBoard[row, col].name;
                string n2 = _gameBoard[row + 1, col].name;
                string n3 = _gameBoard[row + 2, col].name;

                if (n1 == n2 && n2 == n3)
                    DrawLine(_gameBoard[row, col].transform.position + _offset,
                             _gameBoard[row + 2, col].transform.position + _offset);
            }
        }
    }

    private void CheckHorizontalMatches()
    {
        for (int row = 0; row < boardHeight; row++)
        {
            for (int col = 0; col <= boardWidth - 3; col++)
            {
                if (_gameBoard[row, col] == null || _gameBoard[row, col + 1] == null || _gameBoard[row, col + 2] == null)
                    continue;

                string n1 = _gameBoard[row, col].name;
                string n2 = _gameBoard[row, col + 1].name;
                string n3 = _gameBoard[row, col + 2].name;

                if (n1 == n2 && n2 == n3)
                    DrawLine(_gameBoard[row, col].transform.position + _offset,
                             _gameBoard[row, col + 2].transform.position + _offset);
            }
        }
    }
}
