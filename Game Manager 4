using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class SafeGameManager : MonoBehaviour
{
    [Header("Board Settings")]
    [SerializeField] private int boardHeight = 3;
    [SerializeField] private int boardWidth = 3;

    [Header("Slot Icons")]
    [SerializeField] private GameObject[] gamePieces; // Prefabs with SymbolPrefab

    [Header("UI Elements")]
    [SerializeField] private Button spinButton;
    [SerializeField] private TMP_Text balanceText;
    [SerializeField] private TMP_Text betText;
    [SerializeField] private TMP_Text lastWinText;

    [Header("Bankroll Settings")]
    [SerializeField] private int startingBalance = 1000;
    [SerializeField] private int betAmount = 50;

    private int balance;
    private int lastWin;
    private bool isSpinning = false;

    private GameObject _board;
    private GameObject[,] _gameBoard;
    private Transform[,] _gridSlots;
    private Vector3 _offset = new Vector3(0,0,-1);
    private List<GameObject> _matchLines;

    void Awake()
    {
        if (spinButton != null)
        {
            spinButton.onClick.RemoveAllListeners();
            spinButton.onClick.AddListener(Spin);
        }
    }

    void Start()
    {
        _board = GameObject.Find("GameBoard");
        if (_board == null) { Debug.LogError("GameBoard missing"); return; }

        _gameBoard = new GameObject[boardHeight, boardWidth];
        _gridSlots = new Transform[boardHeight, boardWidth];
        _matchLines = new List<GameObject>();

        // cache slots
        for(int i=0;i<boardHeight;i++)
        {
            for(int j=0;j<boardWidth;j++)
            {
                _gridSlots[i,j] = _board.transform.Find($"{i},{j}");
                if(_gridSlots[i,j] == null) { Debug.LogError($"Slot {i},{j} missing"); }
            }
        }

        balance = startingBalance;
        lastWin = 0;
        UpdateUI();
    }

    public void Spin()
    {
        if(isSpinning) return;
        if(balance < betAmount) return;

        isSpinning = true;

        balance -= betAmount;

        ClearMatchLines();

        for(int i=0;i<boardHeight;i++)
        {
            for(int j=0;j<boardWidth;j++)
            {
                SpawnSymbol(i,j);
            }
        }

        int payout = CheckCenterRow();
        if(payout>0)
        {
            int winAmount = payout * betAmount;
            lastWin = winAmount; // persists until next win
            balance += winAmount;
        }

        UpdateUI();
        isSpinning = false;
    }

    private void SpawnSymbol(int row,int col)
    {
        if(_gridSlots[row,col]==null) return;
        if(gamePieces==null || gamePieces.Length==0) return;

        // Destroy old symbol safely
        if(_gameBoard[row,col]!=null)
        {
            Destroy(_gameBoard[row,col]);
            _gameBoard[row,col]=null;
        }

        // choose random prefab
        GameObject prefab = gamePieces[Random.Range(0, gamePieces.Length)];
        if(prefab==null) return;

        GameObject obj = Instantiate(prefab, _gridSlots[row,col].position+_offset, Quaternion.identity,_gridSlots[row,col]);
        obj.name = prefab.name;
        _gameBoard[row,col] = obj;
    }

    private int CheckCenterRow()
    {
        int row = 1;
        if(_gameBoard[row,0]==null || _gameBoard[row,1]==null || _gameBoard[row,2]==null) return 0;

        string n0 = _gameBoard[row,0].name;
        string n1 = _gameBoard[row,1].name;
        string n2 = _gameBoard[row,2].name;

        if(n0==n1 && n1==n2)
        {
            DrawLine(_gameBoard[row,0].transform.position+_offset,_gameBoard[row,2].transform.position+_offset);
            SymbolPrefab sym = _gameBoard[row,0].GetComponent<SymbolPrefab>();
            return sym!=null? sym.symbolData.payout : 2;
        }

        return 0;
    }

    private void DrawLine(Vector3 start, Vector3 end)
    {
        GameObject line = new GameObject("WinLine");
        LineRenderer lr = line.AddComponent<LineRenderer>();
        lr.positionCount=2;
        lr.SetPosition(0,start);
        lr.SetPosition(1,end);
        lr.startWidth = lr.endWidth = 0.1f;
        lr.material = new Material(Shader.Find("Sprites/Default"));
        lr.startColor = lr.endColor = Color.yellow;
        _matchLines.Add(line);
    }

    private void ClearMatchLines()
    {
        foreach(var l in _matchLines) if(l!=null) Destroy(l);
        _matchLines.Clear();
    }

    private void UpdateUI()
    {
        if(balanceText!=null) balanceText.text="Balance: "+balance;
        if(betText!=null) betText.text="Bet: "+betAmount;
        if(lastWinText!=null) lastWinText.text="Last Win: "+lastWin;
    }
}
